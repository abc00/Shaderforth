import[ distance-2d ]

:globals
	@vec3 uniform =iResolution
	@vec4 uniform =iMouse
	@float uniform =iGlobalTime
	@sampler2D uniform =statebuffer
;
:m time iGlobalTime ;

:m screen-width
	iResolution .x.y /
;

:m enemy-position
	[ .85 screen-width * cur .y ]
;

:m player-position
	[ -.85 screen-width * iMouse .y ]
;

:m paddle-size [ .05 .15 ] ;
:m ball-size [ .05 .05 ] ;

: paddle-collide? ( ball:vec2 paddle:vec2 -> bool )
	ball paddle - abs =diff
	paddle-size ball-size + =space
	[
		diff .x space .x <
		diff .y space .y <
		ball .x abs paddle .x abs <
	] \and
;

: logic ( -> sampler2D )
	cur =ball

	{
		cur .zw =dir
		cur .xy dir + =pos
			pos player-position paddle-collide?
			pos enemy-position paddle-collide?
		or =collide
			dir
			[
				-1 1 collide select
				-1 1 1 pos .y abs - .05 <= select
			]
		* =dir
		[ pos dir ]
	} {
		[
			0 0
				.02
				time 375 * sin dup abs /
			*
				.01
				time 127 * sin dup abs /
			*
		]
	} time .1 > cur .x abs 1.5 < and if =gl_FragColor
;

:m cur statebuffer [ 0 0 ] texture2D ;

iResolution frag->position =p

: distance-field ( p:vec2 -> float )
	cur =ball
	[
		p [ .01 1 ] ubox
		p ball .xy + ball-size ubox
		p enemy-position + paddle-size ubox
		p player-position + paddle-size ubox
	] union
;

:m texture ( d )
	.001 d - 1000 * 0 1 clamp vec3
;

&distance-field p gradient texture ->fragcolor

:passes
	[ #2 #1 ] &statebuffer set-dimensions
	logic =statebuffer
;
