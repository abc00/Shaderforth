:globals
	@vec3 uniform =iResolution
	@float uniform =iGlobalTime
;

:m , ;

: rotationmat ( axis:vec3 angle:float -> mat4 )
	axis normalize =axis
	angle sin =s
	angle cos =c
	1 c - =>oc

	[
		oc axis .x * axis .x * c +           , oc axis .x * axis .y * axis .z s * - , oc axis .z * axis .x * axis .y s * + , 0
		oc axis .x * axis .y * axis .z s * + , oc axis .y * axis .y * c +           , oc axis .y * axis .z * axis .x s * - , 0
		oc axis .z * axis .x * axis .y s * - , oc axis .y * axis .z * axis .x s * + , oc axis .z * axis .z * c +           , 0
		0                                    , 0                                    , 0                                    , 1
	]m
;

:m rotate ( p axis angle ) [ p 1 ] axis angle rotationmat * .xyz ;

:m sphere ( p s ) p length s - ;
:m torus ( p t ) [ p .xy length t .x - p .z ] length t .y - ;
: box ( p:vec3 b:vec3 -> float )
	p abs b - =d
	d \max 0 min
	d 0 max length +
;
: cyl ( p:vec3 s:vec2 -> float )
	( p .xz s .xx - length s .y - )
			p .xz length s .x -
			p .y neg s .y -
		max
		p .y s .y -
	max
;
:m plane ( p n ) p n .xyz dot n .w + ;

:m union \min ;
:m hitunion \{ ( $a $b ) a b a .distance b .distance < select } ;
:m subtract \{ ( d1 d2 ) d1 neg d2 max } ;
:m intersect \max ;
:m repeat ( block p c ) p c mod 0.5 c * - *block ;

:m time iGlobalTime ;

:m tx ( p t ) p [ t 0 0 ] + ;
:m ty ( p t ) p [ 0 t 0 ] + ;
:m tz ( p t ) p [ 0 0 t ] + ;

:struct hit
	@float =distance
	@float =material
;

:struct marched
	@float =distance
	@float =obj-distance
	@vec3 =origin
	@vec3 =pos
	@float =material
	@vec3 =color
;

: sagitta ( dia:float rad:float -> float )
		rad
		rad sq dia 2 / sq - sqrt
	- abs
;

: biconvex ( p:vec3 dia:float depth:float rad:float -> float )
	[
		p [ 0 0 rad depth 2 / + ] + rad sphere
		[
			p [ 0 0 rad depth 2 / + ] - rad sphere
			p [ 1 0 0 ] 90 deg->rad rotate [ dia 2 / rad depth + ] cyl
		] subtract
	] subtract
;

: biconcave ( p:vec3 dia:float rad:float -> float )
	dia rad sagitta =sag

	[
		[
			p [ 1 0 0 ] 90 deg->rad rotate [ 0 sag 0 ] + [ dia 2 / sag ] cyl
			p [ 0 0 rad sag - ] + rad sphere
		] intersect
		[
			p [ 1 0 0 ] 90 deg->rad rotate [ 0 sag 0 ] - [ dia 2 / sag ] cyl
			p [ 0 0 rad sag - ] - rad sphere
		] intersect
	] union
;

: scene ( p:vec3 -> hit )
	[
		[ p [ 1 0 2 ] + [ .1 1 10 ] box 0 ] hit
		[ p [ -1 0 2 ] + [ .1 1 10 ] box 0 ] hit
		[ p [ 0 -1 2 ] + [ .9 .1 10 ] box 1 ] hit
		[ p [ 0 1 2 ] + [ .9 .1 10 ] box 2 ] hit
		[ p [ 0 0 3.2 ] + [ 1 1 .1 ] box 0 ] hit
		[ p [ 0 0 -2.2 ] + [ 1 1 .1 ] box 3 ] hit
	] hitunion =cbox

	[ p [ -.2 .7 1.75 ] + .2 sphere 4 ] hit =sph
	[ p [ .4 .35 2.25 ] + [ 0 1 0 ] 30 deg->rad rotate [ .2 .5 .3 ] box 5 ] hit =fbox

	[
		( [ p [ iGlobalTime 1.7 / sin .6 * iGlobalTime 4.7 / sin .6 * 1.5 ] + 1 .01 .5 biconvex 6 ] hit )
		( [ p [ iGlobalTime 3.7 / sin .6 * iGlobalTime 1.9 / sin .6 * .75 ] + .75 5 biconcave 6 ] hit )
		[ p [ iGlobalTime 3.7 / sin .6 * iGlobalTime 1.9 / sin .6 * 2 ] + .75 sphere 6 ] hit
	] hitunion =lenses

	[ cbox sph fbox lenses ] hitunion
;

:struct material
	@vec4 =color
	@float =ambient
	@float =diffuse
	@float =specular
	@float =reflection
	@float =refraction
;

: get-material ( id:float -> material )
	[
		0 [ [ 1 1 0 1 ] .1 .5 10 0 0 ] material
		1 [ [ 1 0 0 1 ] .1 1 1 0 0 ] material
		2 [ [ 0 1 0 1 ] .1 1 1 0 0 ] material
		3 [ [ .75 .4 0 1 ] .1 1 1 0 0 ] material
		4 [ [ 1 0 1 1 ] .1 .4 10 0 0 ] material
		5 [ [ 0 0 1 1 ] .1 .5 1.2 0 0 ] material
		[ [ 1 1 1 1 ] .0 .1 100 .5 10 ] material
	] id choose
;

:m getnormal ( p )
	[
		p eps     tx scene .distance
		p eps neg tx scene .distance -
		p eps     ty scene .distance
		p eps neg ty scene .distance -
		p eps     tz scene .distance
		p eps neg tz scene .distance -
	] normalize
;

iResolution frag->position =pos

2 =>focus
:m far 10 ;
:m close 0.01 ;

[ 0 0 2 ] =origin
[ 0 0 0 ] =>ct

ct origin - normalize =>cd
[ 0 0.5 0 ] =cu
cd cu cross =>cs
cs pos .x * cu pos .y * + cd focus * + normalize =dir

[ 0 0 0 ] =c

: shade ( cur:marched normal:vec3 level:float -> vec4 )
	cur .pos =>ray

	[ 0 .5 2 ] =>lightpos
	[ 1 1 1 ] =>lightcolor
	lightpos ray - normalize =ivec
	ivec normal dot 0 max =incidence
	lightcolor incidence * =>diffuse
	0.1 =>ambient

	cur .material get-material =mat

	0 =specular
	{
		ivec cur .origin + normalize normal dot
		0 max mat .specular pow
		lightpos ray - length / =specular
	} mat .specular 0 != incidence 0 > and when

	[ mat .color .rgb.a * diffuse mat .diffuse * ambient mat .ambient * + specular + * level mat .reflection pow * mat .reflection ]
;

: skip-converge ( ray:vec3 dir:vec3 mat:float a:float b:float -> vec3 )
	{
		ray scene =cur
		{ break } cur .distance close > cur .material mat != or when
		ray dir cur .distance abs a max * + =ray
	} #10 times
	{
		ray scene =cur
		{ break } cur .distance close > cur .material mat == and when
		ray dir cur .distance abs b max * - =ray
	} #10 times
	ray dir cur .distance abs eps + * +
;

: skip-bulk ( ray:vec3 dir:vec3 mat:float -> vec3 )
	( ray dir mat .5 .1 skip-converge =ray
	ray dir mat .1 .01 skip-converge )
	{
		ray scene =cur
		ray dir cur .distance abs 0.025 max * + =ray
		{ break } cur .distance 0.01 > cur .material mat != or when
	} #100 times
	ray
;

: march ( ray:vec3 dir:vec3 -> marched )
	ray =origin
	0 =dist
	[ 0 0 0 ] =color
	1 =trans
	{
		ray scene =cur
		dist cur .distance abs + far min =dist
		ray dir cur .distance abs * + =ray

		{ break } dist far >= when

		cur .material get-material =mat
		{
			{ break }
			{
				ray getnormal =normal
				{
					dir normal reflect normalize =rdir
					ray dir cur .distance abs * - =rorigin
					rorigin dir march-one color + =color
				} mat .reflection 0 > when
				[ dist cur .distance origin ray cur .material color ] marched =>cm
				cm normal 1 shade =>shaded
				shaded .rgb trans * color + =color
				mat .color .a trans * =trans
				dir normal 1 mat .refraction / refract =dir
				ray dir cur .distance abs * + dir cur .material skip-bulk =ray
				ray getnormal =normal
				dir normal mat .refraction refract =dir
				ray dir cur .distance abs * + =ray
				0 =dist
			} mat .refraction 0 == if
		} cur .distance close < when
	} #50 times
	[
		dist far cur .distance close < select
		cur .distance
		origin
		ray
		cur .material
		color
	] marched
;

: march-one ( ray:vec3 dir:vec3 -> vec3 )
	ray =origin
	0 =dist
	[ 0 0 0 ] =color
	{
		ray scene =cur
		dist cur .distance abs + far min =dist
		ray dir cur .distance abs * + =ray

		{ break } dist far >= when
		{ break } cur .distance close < when
	} #10 times
	[
		dist far cur .distance close < select
		cur .distance
		origin
		ray
		cur .material
		color
	] marched =mcur
	{
		( ) ( { [ 0 0 0 ] return } cur .material get-material .refraction 0 > when )
		ray getnormal =normal
		mcur normal 0.9 shade =shaded
		shaded .rgb =color
	} cur .distance far < when
	color
;

#10 =>iters
{
	float iters float / 1 swap - =level

	origin dir march =cur
	c cur .color + =c

	{
		cur .pos getnormal =normal
		cur normal level shade =shaded
		c shaded .rgb + =c

		{
			dir normal reflect normalize =dir
			cur .pos dir cur .obj-distance * + dir close * + =origin
		} {
			break
		} shaded .w 0 != if
	} {
		break
	} cur .distance far < if
} iters times

c ->fragcolor
